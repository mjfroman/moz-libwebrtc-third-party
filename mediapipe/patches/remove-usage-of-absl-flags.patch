From b89a077dcd44d2d72780a3b6e07cbd83ffd5f8e5 Mon Sep 17 00:00:00 2001
From: Robert Ogden <robertogden@chromium.org>
Date: Wed, 12 Jul 2023 15:03:39 -0700
Subject: [PATCH] remove usage of absl flags

---
 .../mediapipe/src/mediapipe/util/cpu_util.cc       | 14 ++------------
 .../src/mediapipe/util/resource_util_default.cc    |  8 +-------
 2 files changed, 3 insertions(+), 19 deletions(-)

diff --git a/third_party/mediapipe/src/mediapipe/util/cpu_util.cc b/third_party/mediapipe/src/mediapipe/util/cpu_util.cc
index 052eabb855d5a..4cdac954e741a 100644
--- a/third_party/mediapipe/src/mediapipe/util/cpu_util.cc
+++ b/third_party/mediapipe/src/mediapipe/util/cpu_util.cc
@@ -26,7 +26,6 @@
 #include <fstream>
 
 #include "absl/algorithm/container.h"
-#include "absl/flags/flag.h"
 #include "absl/strings/match.h"
 #include "absl/strings/numbers.h"
 #include "absl/strings/str_cat.h"
@@ -35,23 +34,14 @@
 #include "mediapipe/framework/port/integral_types.h"
 #include "mediapipe/framework/port/statusor.h"
 
-ABSL_FLAG(std::string, system_cpu_max_freq_file,
-          "/sys/devices/system/cpu/cpu$0/cpufreq/cpuinfo_max_freq",
-          "The file pattern for CPU max frequencies, where $0 will be replaced "
-          "with the CPU id.");
-
 namespace mediapipe {
 namespace {
 
 constexpr uint32_t kBufferLength = 64;
 
 absl::StatusOr<std::string> GetFilePath(int cpu) {
-  if (!absl::StrContains(absl::GetFlag(FLAGS_system_cpu_max_freq_file), "$0")) {
-    return absl::InvalidArgumentError(
-        absl::StrCat("Invalid frequency file: ",
-                     absl::GetFlag(FLAGS_system_cpu_max_freq_file)));
-  }
-  return absl::Substitute(absl::GetFlag(FLAGS_system_cpu_max_freq_file), cpu);
+  return absl::InternalError(
+      "system_cpu_max_freq_file flag not supported in Chromium");
 }
 
 absl::StatusOr<uint64_t> GetCpuMaxFrequency(int cpu) {
diff --git a/third_party/mediapipe/src/mediapipe/util/resource_util_default.cc b/third_party/mediapipe/src/mediapipe/util/resource_util_default.cc
index 3ebbd1f34b8d8..13263cea023fb 100644
--- a/third_party/mediapipe/src/mediapipe/util/resource_util_default.cc
+++ b/third_party/mediapipe/src/mediapipe/util/resource_util_default.cc
@@ -14,16 +14,10 @@
 
 #include <fstream>
 
-#include "absl/flags/flag.h"
 #include "mediapipe/framework/deps/file_path.h"
 #include "mediapipe/framework/port/file_helpers.h"
 #include "mediapipe/framework/port/statusor.h"
 
-ABSL_FLAG(
-    std::string, resource_root_dir, "",
-    "The absolute path to the resource directory."
-    "If specified, resource_root_dir will be prepended to the original path.");
-
 namespace mediapipe {
 
 using mediapipe::file::GetContents;
@@ -49,7 +43,7 @@ absl::StatusOr<std::string> PathToResourceAsFile(const std::string& path) {
   if (file::Exists(bazel_path).ok()) {
     return bazel_path;
   }
-  return JoinPath(absl::GetFlag(FLAGS_resource_root_dir), path);
+  return path;
 }
 
 }  // namespace mediapipe
-- 
2.41.0.255.g8b1d071c50-goog

