From f089fe95b942cce3df14748b2c4b092fff4d3bc5 Mon Sep 17 00:00:00 2001
From: Robert Ogden <robertogden@chromium.org>
Date: Wed, 12 Jul 2023 10:44:28 -0700
Subject: [PATCH] safe_int.h ignore warning

---
 .../mediapipe/src/mediapipe/framework/deps/safe_int.h  | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/third_party/mediapipe/src/mediapipe/framework/deps/safe_int.h b/third_party/mediapipe/src/mediapipe/framework/deps/safe_int.h
index 4c120bc1b3ac3..ad16567637556 100644
--- a/third_party/mediapipe/src/mediapipe/framework/deps/safe_int.h
+++ b/third_party/mediapipe/src/mediapipe/framework/deps/safe_int.h
@@ -90,10 +90,16 @@ class SafeIntStrongIntValidator {
     // sure the value is in range.  It is undefined behavior to convert to int
     // from a float that is out of range.
     if (std::is_floating_point<U>::value) {
+      // The compiler's static analysis thinks that we could be comparing an
+      // integer to a float, hence the warning. We know this is not possible
+      // given the if condition, so turn off the warning.
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wimplicit-const-int-float-conversion"
       if (arg < std::numeric_limits<T>::min() ||
           arg > std::numeric_limits<T>::max()) {
         ErrorType::Error("SafeInt: init from out of bounds float", arg, "=");
       }
+#pragma clang diagnostic pop
     } else {
       // If the initial value (type U) is changed by being converted to and from
       // the native type (type T), then it must be out of bounds for type T.
-- 
2.41.0.255.g8b1d071c50-goog

