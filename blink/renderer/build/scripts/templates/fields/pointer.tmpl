{% import 'templates/fields/base.tmpl' as base %}
{% from 'templates/fields/field.tmpl' import getter_expression, setter_expression, encode, decode, getter_method_name, setter_method_name, move_if_changed %}

{% macro wrapped_type(field) -%}
  {{field.wrapper_pointer_name}}<{{field.type_name}}>
  {#- TODO: Use raw pointer in the builder. -#}
{%- endmacro %}

{% macro unwrap_pointer(field) -%}
  {% if field.wrapper_pointer_name == 'Member' -%}
      .Get()
  {%- else -%}
    {#- Assumed scoped_refptr, unique_ptr, etc -#}
    .get()
  {%- endif %}
{%- endmacro %}

{# The standard base.decl_getter_method would generate a function that
   returns 'const T&', but we prefer 'T*' for this field type. #}
{% macro decl_getter_method(field, visibility) -%}
{% if field.getter_visibility == visibility %}
{{field.type_name}}* {{getter_method_name(field)}}() const {
  return {{decode(field, getter_expression(field))}}{{unwrap_pointer(field)}};
}
{% endif %}
{%- endmacro %}

{# The standard base.decl_setter_method would generate a function which
   accepts 'const T&', which is not what we want. This custom setter accepts
   WrapperType<T> instead. #}
{% macro decl_setter_method(field, visibility) -%}
{% if field.setter_visibility == visibility and field.builder %}
void {{setter_method_name(field)}}({{wrapped_type(field)}} v) {
  {{move_if_changed(field, encode(field, "v"))|indent(2)}}
}
{% endif %}
{%- endmacro %}

{% macro decl_public_methods(field) -%}
{{decl_getter_method(field, 'public')}}
{{decl_setter_method(field, 'public')}}
{%- endmacro %}

{% macro decl_protected_methods(field) -%}
{{decl_getter_method(field, 'protected')}}
{{decl_setter_method(field, 'protected')}}
{%- endmacro %}
