// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


#include "third_party/blink/common/permissions_policy/permissions_policy_features_generated.h"

#include "base/no_destructor.h"
#include "base/feature_list.h"
#include "third_party/blink/public/common/features.h"
#include "third_party/blink/public/mojom/permissions_policy/permissions_policy_feature.mojom.h"

namespace blink {

void UpdatePermissionsPolicyFeatureListFlagDefaults(PermissionsPolicyFeatureList& mutable_feature_list) {
  {% for feature in features %}
  {%- if feature.default_value_behind_flag %}
    {%- for flag, default_value in feature.default_value_behind_flag %}
      {%- if not loop.first %} else {% endif %}
  if (base::FeatureList::IsEnabled(features::k{{flag}})) {
    mutable_feature_list.find(mojom::PermissionsPolicyFeature::k{{feature.name}})->second =
      PermissionsPolicyFeatureDefault::{{default_value}};
  }
    {%- endfor %}
 else {
    mutable_feature_list.find(mojom::PermissionsPolicyFeature::k{{feature.name}})->second =
      PermissionsPolicyFeatureDefault::{{feature.feature_default}};
  }

  {% endif %}
  {%- endfor %}
}

PermissionsPolicyFeatureList GetBasePermissionsPolicyFeatureList() {
  static const base::NoDestructor<PermissionsPolicyFeatureList> feature_list([] {
    PermissionsPolicyFeatureList map({
      {%- for feature in features %}
        {
          mojom::PermissionsPolicyFeature::k{{feature.name}},
          PermissionsPolicyFeatureDefault::{{feature.feature_default}}
        },
      {%- endfor %}
    });

    return map;
  }());
  return *feature_list;
}

} // namespace blink
