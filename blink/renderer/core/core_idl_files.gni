# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/blink/renderer/bindings/bindings.gni")
import("//third_party/blink/renderer/core/core.gni")

# The paths in this file are absolute since this file is imported and the
# file lists must be valid from multple "current directories".

bindings_core_output_dir = "$bindings_output_dir/core"

# Global constructors
core_global_constructors_original_interfaces = [
  "DedicatedWorkerGlobalScope",
  "LayoutWorkletGlobalScope",
  "SharedWorkerGlobalScope",
  "Window",
]

# The size and the order in the following list must match to the previous one.
if (use_blink_v8_binding_new_idl_interface) {
  core_global_constructors_original_interface_basenames = []
} else {
  core_global_constructors_original_interface_basenames = [
    "dedicated_worker_global_scope",
    "layout_worklet_global_scope",
    "shared_worker_global_scope",
    "window",
  ]
}

# The interfaces aren't technically files, but we can treat them as file names
# to get process_file_template to generate lists of IDL files corresponding
# to each interface.
core_global_constructors_generated_idl_files =
    process_file_template(
        core_global_constructors_original_interface_basenames,
        [ "$blink_core_output_dir/{{source_name_part}}_core_constructors.idl" ])

# IDL interfaces that do not have any dependency to modules/ (partial
# interfaces, mixins, partial mixins).
core_interface_idl_files_core_only = []

# IDL interfaces that depend on partial definitions in modules/ (partial
# interfaces, mixins, partial mixins).
core_interface_idl_files_modules_dependent = []

# IDL partial definitions (partial interfaces, mixins, partial mixins).
core_partial_definition_idl_files = []

core_buffer_source_type_idl_files =
    get_path_info([
                    "typed_arrays/array_buffer.idl",
                    "typed_arrays/array_buffer_view.idl",
                    "typed_arrays/big_int_64_array.idl",
                    "typed_arrays/big_uint_64_array.idl",
                    "typed_arrays/data_view.idl",
                    "typed_arrays/float32_array.idl",
                    "typed_arrays/float64_array.idl",
                    "typed_arrays/int16_array.idl",
                    "typed_arrays/int32_array.idl",
                    "typed_arrays/int8_array.idl",
                    "typed_arrays/shared_array_buffer.idl",
                    "typed_arrays/uint16_array.idl",
                    "typed_arrays/uint32_array.idl",
                    "typed_arrays/uint8_array.idl",
                    "typed_arrays/uint8_clamped_array.idl",
                  ],
                  "abspath")

# IDL files that only have typedefs/enums.
core_typedefs_enums_only_idl_files = []

core_callback_function_idl_files = []

core_callback_interface_idl_files = []

core_dictionary_idl_files = []

core_testing_dictionary_idl_files = []

webcore_testing_idl_files = []

# Testing IDL files that have partial interfaces in modules.
webcore_testing_idl_with_modules_dependency_files = []

webcore_testing_dependency_idl_files = []

generated_webcore_testing_idl_files = []

core_definition_idl_files =
    core_interface_idl_files_core_only +
    core_interface_idl_files_modules_dependent +
    core_buffer_source_type_idl_files + core_callback_interface_idl_files +
    core_dictionary_idl_files

core_testing_definition_idl_files =
    core_testing_dictionary_idl_files + webcore_testing_idl_files +
    webcore_testing_idl_with_modules_dependency_files

# Static IDL files
core_static_interface_idl_files =
    core_definition_idl_files + core_testing_definition_idl_files +
    core_callback_function_idl_files + core_typedefs_enums_only_idl_files

core_static_dependency_idl_files =
    core_partial_definition_idl_files + webcore_testing_dependency_idl_files

# Generated IDL files
core_generated_interface_idl_files =
    generated_webcore_testing_idl_files  # interfaces
core_generated_dependency_idl_files =
    core_global_constructors_generated_idl_files  # partial interfaces

# Dependency IDL files: don't generate individual bindings, but do process
# in IDL dependency computation, and count as build dependencies
# 'core_dependency_idl_files' is already used in Source/core, so avoid
# collision
core_all_dependency_idl_files =
    core_static_dependency_idl_files + core_generated_dependency_idl_files
