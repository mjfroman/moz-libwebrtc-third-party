// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://www.w3.org/TR/webnn/

typedef record<DOMString, MLOperand> MLNamedOperands;

enum MLInputOperandLayout { "nchw", "nhwc" };

enum MLConv2dFilterOperandLayout { "oihw", "hwio", "ohwi", "ihwo" };

enum MLAutoPad { "explicit", "same-upper", "same-lower" };

dictionary MLConv2dOptions {
  sequence<[EnforceRange] unsigned long> padding;
  sequence<[EnforceRange] unsigned long> strides;
  sequence<[EnforceRange] unsigned long> dilations;
  MLAutoPad autoPad = "explicit";
  [EnforceRange] unsigned long groups = 1;
  MLInputOperandLayout inputLayout = "nchw";
  MLConv2dFilterOperandLayout filterLayout = "oihw";
  MLOperand bias;
  MLActivation activation;
};

dictionary MLGemmOptions {
  MLOperand c;
  float alpha = 1.0;
  float beta = 1.0;
  boolean aTranspose = false;
  boolean bTranspose = false;
};

dictionary MLLeakyReluOptions {
  float alpha = 0.01;
};

enum MLRoundingType {
  "floor",
  "ceil"
};

dictionary MLPool2dOptions {
  sequence<[EnforceRange] unsigned long> windowDimensions;
  sequence<[EnforceRange] unsigned long> padding;
  sequence<[EnforceRange] unsigned long> strides;
  sequence<[EnforceRange] unsigned long> dilations;
  MLAutoPad autoPad = "explicit";
  MLInputOperandLayout layout = "nchw";
  MLRoundingType roundingType = "floor";
  sequence<[EnforceRange] unsigned long> outputSizes;
};

dictionary MLClampOptions {
  float minValue;
  float maxValue;
};

enum MLInterpolationMode {"nearest-neighbor", "linear" };

dictionary MLResample2dOptions {
  MLInterpolationMode mode = "nearest-neighbor";
  sequence<float> scales;
  sequence<[EnforceRange] unsigned long> sizes;
  sequence<[EnforceRange] unsigned long> axes;
};

dictionary MLTransposeOptions{
  sequence<[EnforceRange] unsigned long> permutation;
};

[
  RuntimeEnabled=MachineLearningNeuralNetwork,
  Exposed=(Window, DedicatedWorker)
] interface MLGraphBuilder {
  constructor(MLContext context);

  [RaisesException] MLOperand input(DOMString name, MLOperandDescriptor desc);

  [RaisesException] MLOperand constant(MLOperandDescriptor desc, MLBufferView bufferView);

  [RaisesException] MLOperand clamp(MLOperand input, optional MLClampOptions options = {});
  [RaisesException] MLActivation clamp(optional MLClampOptions options = {});

  [RaisesException] MLOperand concat(sequence<MLOperand> inputs, [EnforceRange] unsigned long axis);

  [RaisesException] MLOperand conv2d(MLOperand input, MLOperand filter, optional MLConv2dOptions options = {});

  // Element-wise binary operations
  [RaisesException] MLOperand add(MLOperand a, MLOperand b);
  [RaisesException] MLOperand sub(MLOperand a, MLOperand b);
  [RaisesException] MLOperand mul(MLOperand a, MLOperand b);
  [RaisesException] MLOperand div(MLOperand a, MLOperand b);
  [RaisesException] MLOperand max(MLOperand a, MLOperand b);
  [RaisesException] MLOperand min(MLOperand a, MLOperand b);

  [RaisesException] MLOperand gemm(MLOperand a, MLOperand b, optional MLGemmOptions options = {});

  [RaisesException] MLOperand hardSwish(MLOperand x);
  [RaisesException] MLActivation hardSwish();

  [RaisesException] MLOperand leakyRelu(MLOperand x, optional MLLeakyReluOptions options = {});
  [RaisesException] MLActivation leakyRelu(optional MLLeakyReluOptions options = {});

  // Pooling operations
  [RaisesException] MLOperand averagePool2d(MLOperand input, optional MLPool2dOptions options = {});
  [RaisesException] MLOperand maxPool2d(MLOperand input, optional MLPool2dOptions options = {});

  [RaisesException] MLOperand relu(MLOperand input);
  [RaisesException] MLActivation relu();

  [RaisesException] MLOperand reshape(MLOperand input, sequence<[EnforceRange] unsigned long?> newShape);

  [RaisesException] MLOperand resample2d(MLOperand input, optional MLResample2dOptions options = {});

  [RaisesException] MLOperand sigmoid(MLOperand input);
  [RaisesException] MLActivation sigmoid();

  [RaisesException] MLOperand transpose(MLOperand input, optional MLTransposeOptions options = {});

  [RaisesException] MLOperand softmax(MLOperand input);

  [CallWith=ScriptState, RaisesException] Promise<MLGraph> build(MLNamedOperands outputs);
  [RaisesException, Exposed=DedicatedWorker] MLGraph buildSync(MLNamedOperands outputs);
};
